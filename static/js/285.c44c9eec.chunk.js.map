{"version":3,"file":"static/js/285.c44c9eec.chunk.js","mappings":"0UAoBMA,EAASC,EAAAA,GACL,CACNC,KAAMD,EAAAA,KAEHE,WACAC,OACAC,IAAI,EAAG,+CACPC,QACC,yHACA,8DAEJC,MAAON,EAAAA,KAAaE,WAAWI,QAAQH,OACvCI,SAAUP,EAAAA,KAAaE,WAAWC,OAAOC,IAAI,KAE9CF,WAiGH,UA/FiB,WACf,IAAMM,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQC,EAAAA,EAAAA,KACd,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,YACNC,UAAUC,EAAAA,EAAAA,GAAYrB,KALtBsB,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OA+BTE,GAAKC,EAAAA,EAAAA,IAAkB,WAAY,WAEzC,OACE,UAAC,IAAD,CACEC,SAAUL,GA7BG,SAAAM,GACfpB,GAASqB,EAAAA,EAAAA,IAAOD,IACbE,SACAC,MAAK,kBACJhB,EAAM,CACJiB,MAAM,+BACNC,QAAS,SACTC,YAAY,EACZC,SAAU,YACVC,OAAQ,UACRC,SAAU,KAPR,IAULC,OAAM,kBACLvB,EAAM,CACJiB,MAAM,8CACNC,QAAS,SACTC,YAAY,EACZC,SAAU,YACVC,OAAQ,QACRC,SAAU,KAPP,GAUV,IAOGE,GAAG,OACHC,GAAG,OACHC,EAAG,CAAEC,KAAM,MAAOC,GAAI,KACtBC,EAAE,IALJ,WAOE,SAAC,IAAD,UAAS,kBAET,UAAC,KAAD,CAAaC,UAAWtB,EAAOtB,KAAM6C,YAAU,EAA/C,WACE,SAAC,IAAD,UAAW,UACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,QAAW3B,EAAS,SAAhC,IAAyCI,GAAIA,MAC7C,SAAC,KAAD,UACGF,EAAOtB,MAAQsB,EAAOtB,KAAKgD,cAIhC,UAAC,KAAD,CAAaJ,UAAWtB,EAAOjB,MAAOwC,YAAU,EAAhD,WACE,SAAC,IAAD,UAAW,WACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,SAAY3B,EAAS,UAAjC,IAA2CI,GAAIA,MAC/C,SAAC,KAAD,UACGF,EAAOjB,OAASiB,EAAOjB,MAAM2C,cAIlC,UAAC,KAAD,CAAaJ,UAAWtB,EAAOhB,SAAUuC,YAAU,EAAnD,WACE,SAAC,IAAD,UAAW,cACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,YAAe3B,EAAS,aAApC,IAAiDI,GAAIA,MACrD,SAAC,KAAD,UACGF,EAAOhB,UAAYgB,EAAOhB,SAAS0C,cAIxC,SAAC,IAAD,CACED,KAAK,SACLf,QAAQ,UACRiB,YAAY,OACZtC,UAAWA,EAJb,SAKC,aAID,SAAC,IAAD,CACEuC,QAAS,kBAAMzC,EAAS,SAAf,EACTwC,YAAY,OACZjB,QAAQ,QAHV,SAIC,YAKN,C","sources":["pages/Register.jsx"],"sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n  Heading,\n  Button,\n  useColorModeValue,\n  useToast,\n} from '@chakra-ui/react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport { signup } from 'redux/auth/authOperations';\nimport { selectAuthLoading } from 'redux/selectors';\n\nconst schema = yup\n  .object({\n    name: yup\n      .string()\n      .required()\n      .trim()\n      .min(3, 'Name must be no less than 3 characters long')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces'\n      ),\n    email: yup.string().required().email().trim(),\n    password: yup.string().required().trim().min(7),\n  })\n  .required();\n\nconst Register = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isLoading = useSelector(selectAuthLoading);\n  const toast = useToast();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = data => {\n    dispatch(signup(data))\n      .unwrap()\n      .then(() =>\n        toast({\n          title: `Registration is successfully`,\n          variant: 'subtle',\n          isClosable: true,\n          position: 'top-right',\n          status: 'success',\n          duration: 3000,\n        })\n      )\n      .catch(() =>\n        toast({\n          title: `User with this email address already exists`,\n          variant: 'subtle',\n          isClosable: true,\n          position: 'top-right',\n          status: 'error',\n          duration: 3000,\n        })\n      );\n  };\n\n  const bg = useColorModeValue('gray.100', '#0a192f');\n\n  return (\n    <VStack\n      onSubmit={handleSubmit(onSubmit)}\n      as=\"form\"\n      mx=\"auto\"\n      w={{ base: '90%', md: 500 }}\n      p=\"4\"\n    >\n      <Heading>Registration</Heading>\n\n      <FormControl isInvalid={errors.name} isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input type=\"text\" {...register('name')} bg={bg} />\n        <FormErrorMessage>\n          {errors.name && errors.name.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.email} isRequired>\n        <FormLabel>Email</FormLabel>\n        <Input type=\"email\" {...register('email')} bg={bg} />\n        <FormErrorMessage>\n          {errors.email && errors.email.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.password} isRequired>\n        <FormLabel>Password</FormLabel>\n        <Input type=\"password\" {...register('password')} bg={bg} />\n        <FormErrorMessage>\n          {errors.password && errors.password.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <Button\n        type=\"submit\"\n        variant=\"outline\"\n        colorScheme=\"teal\"\n        isLoading={isLoading}\n      >\n        Sign Up\n      </Button>\n\n      <Button\n        onClick={() => navigate('/login')}\n        colorScheme=\"teal\"\n        variant=\"ghost\"\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Register;\n"],"names":["schema","yup","name","required","trim","min","matches","email","password","dispatch","useDispatch","navigate","useNavigate","isLoading","useSelector","selectAuthLoading","toast","useToast","useForm","mode","resolver","yupResolver","register","handleSubmit","errors","formState","bg","useColorModeValue","onSubmit","data","signup","unwrap","then","title","variant","isClosable","position","status","duration","catch","as","mx","w","base","md","p","isInvalid","isRequired","I","type","message","colorScheme","onClick"],"sourceRoot":""}