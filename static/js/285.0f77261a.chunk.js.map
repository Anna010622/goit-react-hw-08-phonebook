{"version":3,"file":"static/js/285.0f77261a.chunk.js","mappings":"0UAoBMA,EAASC,EAAAA,GACL,CACNC,KAAMD,EAAAA,KAEHE,WACAC,OACAC,IAAI,EAAG,+CACPC,QACC,yHACA,8DAEJC,MAAON,EAAAA,KAAaE,WAAWI,QAAQH,OACvCI,SAAUP,EAAAA,KAAaE,WAAWC,OAAOC,IAAI,KAE9CF,WA0FH,UAxFiB,WACf,IAAMM,GAAKC,EAAAA,EAAAA,IAAkB,WAAY,WAGnCC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAQ,GAAE,IAUpB,OAIIC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,YACNC,UAAUC,EAAAA,EAAAA,GAAYnB,KALtBoB,EADF,EACEA,SACAC,EAFF,EAEEA,aAFF,IAGEC,UAAaC,EAHf,EAGeA,OAAQC,EAHvB,EAGuBA,aAavB,OACE,UAAC,IAAD,CACEC,SAAUJ,GATG,SAAAK,GACff,GAASgB,EAAAA,EAAAA,IAAOD,IACbE,SACAC,MAAK,kBAAMC,EAAAA,GAAAA,QAAA,+BAAN,IACLC,OAAM,kBAAMD,EAAAA,GAAAA,MAAA,8CAAN,GACV,IAKGE,GAAG,OACHC,GAAG,OACHC,EAAG,CAAEC,KAAM,MAAOC,GAAI,KACtBC,EAAE,IALJ,WAOE,SAAC,IAAD,UAAS,kBAET,UAAC,KAAD,CAAaC,UAAWf,EAAOrB,KAAMqC,YAAU,EAA/C,WACE,SAAC,IAAD,UAAW,UACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,QAAWrB,EAAS,SAAhC,IAAyCX,GAAIA,MAC7C,SAAC,KAAD,UACGc,EAAOrB,MAAQqB,EAAOrB,KAAKwC,cAIhC,UAAC,KAAD,CAAaJ,UAAWf,EAAOhB,MAAOgC,YAAU,EAAhD,WACE,SAAC,IAAD,UAAW,WACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,SAAYrB,EAAS,UAAjC,IAA2CX,GAAIA,MAC/C,SAAC,KAAD,UACGc,EAAOhB,OAASgB,EAAOhB,MAAMmC,cAIlC,UAAC,KAAD,CAAaJ,UAAWf,EAAOf,SAAU+B,YAAU,EAAnD,WACE,SAAC,IAAD,UAAW,cACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,YAAerB,EAAS,aAApC,IAAiDX,GAAIA,MACrD,SAAC,KAAD,UACGc,EAAOf,UAAYe,EAAOf,SAASkC,cAIxC,SAAC,IAAD,CACED,KAAK,SACLE,QAAQ,UACRC,YAAY,OACZC,UAAWrB,EAJb,SAKC,aAID,SAAC,IAAD,CACEsB,QAAS,kBAAMjC,EAAS,SAAf,EACT+B,YAAY,OACZD,QAAQ,QAHV,SAIC,YAKN,C","sources":["pages/Register.jsx"],"sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n  Heading,\n  Button,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { signup } from 'redux/auth/authOperations';\n\nconst schema = yup\n  .object({\n    name: yup\n      .string()\n      .required()\n      .trim()\n      .min(3, 'Name must be no less than 3 characters long')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces'\n      ),\n    email: yup.string().required().email().trim(),\n    password: yup.string().required().trim().min(7),\n  })\n  .required();\n\nconst Register = () => {\n  const bg = useColorModeValue('gray.100', '#0a192f');\n\n  // const [isClicked, setIsClicked] = useState(false);\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  useEffect(() => {}, []);\n  // const contacts = useSelector(getContacts);\n  // const isLoading = useSelector(getLoading);\n\n  // useEffect(() => {\n  //   if (!isLoading) {\n  //     setIsClicked(false);\n  //   }\n  // }, [isLoading]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = data => {\n    dispatch(signup(data))\n      .unwrap()\n      .then(() => toast.success(`Registration is successfully`))\n      .catch(() => toast.error(`User with this email address already exists`));\n  };\n\n  return (\n    <VStack\n      onSubmit={handleSubmit(onSubmit)}\n      as=\"form\"\n      mx=\"auto\"\n      w={{ base: '90%', md: 500 }}\n      p=\"4\"\n    >\n      <Heading>Registration</Heading>\n\n      <FormControl isInvalid={errors.name} isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input type=\"text\" {...register('name')} bg={bg} />\n        <FormErrorMessage>\n          {errors.name && errors.name.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.email} isRequired>\n        <FormLabel>Email</FormLabel>\n        <Input type=\"email\" {...register('email')} bg={bg} />\n        <FormErrorMessage>\n          {errors.email && errors.email.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.password} isRequired>\n        <FormLabel>Password</FormLabel>\n        <Input type=\"password\" {...register('password')} bg={bg} />\n        <FormErrorMessage>\n          {errors.password && errors.password.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <Button\n        type=\"submit\"\n        variant=\"outline\"\n        colorScheme=\"teal\"\n        isLoading={isSubmitting}\n      >\n        Sign Up\n      </Button>\n\n      <Button\n        onClick={() => navigate('/login')}\n        colorScheme=\"teal\"\n        variant=\"ghost\"\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Register;\n"],"names":["schema","yup","name","required","trim","min","matches","email","password","bg","useColorModeValue","dispatch","useDispatch","navigate","useNavigate","useEffect","useForm","mode","resolver","yupResolver","register","handleSubmit","formState","errors","isSubmitting","onSubmit","data","signup","unwrap","then","toast","catch","as","mx","w","base","md","p","isInvalid","isRequired","I","type","message","variant","colorScheme","isLoading","onClick"],"sourceRoot":""}