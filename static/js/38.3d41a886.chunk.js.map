{"version":3,"file":"static/js/38.3d41a886.chunk.js","mappings":"0UAoBMA,EAASC,EAAAA,GACL,CACNC,MAAOD,EAAAA,KAAaE,WAAWD,QAAQE,OACvCC,SAAUJ,EAAAA,KAAaE,WAAWC,OAAOE,IAAI,KAE9CH,WAgFH,UA9Ec,WACZ,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAE9B,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,YACNC,UAAUC,EAAAA,EAAAA,GAAYf,KALtBgB,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAKTE,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAiBRC,GAAKC,EAAAA,EAAAA,IAAkB,WAAY,WAEzC,OACE,UAAC,IAAD,CACEC,SAAUT,GAnBG,SAAAU,GACfpB,GAASqB,EAAAA,EAAAA,IAAMD,IACZE,SACAC,OAAM,kBACLR,EAAM,CACJS,MAAM,iCACNC,QAAS,SACTC,YAAY,EACZC,SAAU,YACVC,OAAQ,QACRC,SAAU,KAPP,GAUV,IAOGC,GAAG,OACHC,GAAG,OACHC,EAAG,CAAEC,KAAM,MAAOC,GAAI,KACtBC,EAAE,IALJ,WAOE,SAAC,IAAD,UAAS,0BAET,UAAC,KAAD,CAAaC,UAAWzB,EAAOhB,MAAO0C,YAAU,EAAhD,WACE,SAAC,IAAD,UAAW,WACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,SAAY9B,EAAS,UAAjC,IAA2CQ,GAAIA,MAC/C,SAAC,KAAD,UACGN,EAAOhB,OAASgB,EAAOhB,MAAM6C,cAIlC,UAAC,KAAD,CAAaJ,UAAWzB,EAAOb,SAAUuC,YAAU,EAAnD,WACE,SAAC,IAAD,UAAW,cACX,SAAC,EAAAC,GAAD,gBAAOC,KAAK,YAAe9B,EAAS,aAApC,IAAiDQ,GAAIA,MACrD,SAAC,KAAD,UACGN,EAAOb,UAAYa,EAAOb,SAAS0C,cAIxC,SAAC,IAAD,CACED,KAAK,SACLd,QAAQ,UACRgB,YAAY,OACZvC,UAAWA,EAJb,SAKC,WAID,SAAC,IAAD,CACEwC,QAAS,kBAAM7B,EAAS,YAAf,EACT4B,YAAY,OACZhB,QAAQ,QAHV,SAIC,cAKN,C","sources":["pages/Login.jsx"],"sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n  Heading,\n  Button,\n  useColorModeValue,\n  useToast,\n} from '@chakra-ui/react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from 'redux/auth/authOperations';\nimport { selectAuthLoading } from 'redux/selectors';\n\nconst schema = yup\n  .object({\n    email: yup.string().required().email().trim(),\n    password: yup.string().required().trim().min(7),\n  })\n  .required();\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectAuthLoading);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(schema),\n  });\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  const onSubmit = data => {\n    dispatch(login(data))\n      .unwrap()\n      .catch(() =>\n        toast({\n          title: `Email or password is incorrect`,\n          variant: 'subtle',\n          isClosable: true,\n          position: 'top-right',\n          status: 'error',\n          duration: 3000,\n        })\n      );\n  };\n\n  const bg = useColorModeValue('gray.100', '#0a192f');\n\n  return (\n    <VStack\n      onSubmit={handleSubmit(onSubmit)}\n      as=\"form\"\n      mx=\"auto\"\n      w={{ base: '90%', md: 500 }}\n      p=\"4\"\n    >\n      <Heading>Login to the account</Heading>\n\n      <FormControl isInvalid={errors.email} isRequired>\n        <FormLabel>Email</FormLabel>\n        <Input type=\"email\" {...register('email')} bg={bg} />\n        <FormErrorMessage>\n          {errors.email && errors.email.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.password} isRequired>\n        <FormLabel>Password</FormLabel>\n        <Input type=\"password\" {...register('password')} bg={bg} />\n        <FormErrorMessage>\n          {errors.password && errors.password.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <Button\n        type=\"submit\"\n        variant=\"outline\"\n        colorScheme=\"teal\"\n        isLoading={isLoading}\n      >\n        Login\n      </Button>\n\n      <Button\n        onClick={() => navigate('/register')}\n        colorScheme=\"teal\"\n        variant=\"ghost\"\n      >\n        Sign up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n"],"names":["schema","yup","email","required","trim","password","min","dispatch","useDispatch","isLoading","useSelector","selectAuthLoading","useForm","mode","resolver","yupResolver","register","handleSubmit","errors","formState","navigate","useNavigate","toast","useToast","bg","useColorModeValue","onSubmit","data","login","unwrap","catch","title","variant","isClosable","position","status","duration","as","mx","w","base","md","p","isInvalid","isRequired","I","type","message","colorScheme","onClick"],"sourceRoot":""}