{"version":3,"file":"static/js/426.d7803050.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/EditForm/EditForm.jsx","components/Popover/Popover.jsx","utils/formatContact.js","components/AlertDialog/AlertDialog.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts, selectContactsLoading } from 'redux/selectors';\nimport {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  VStack,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { useToast } from '@chakra-ui/react';\n\nexport const schema = yup\n  .object({\n    name: yup\n      .string()\n      .required('Name is required')\n      .min(3, 'Name must be no less than 3 characters long')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces'\n      ),\n    number: yup\n      .string()\n      .required('Number is required')\n      .transform(currentValue => currentValue.replace(/\\D+/g, ''))\n      .min(7, 'Number phone must be no less than 7 characters long')\n      .max(12, 'Number phone must be no more than 12 digits'),\n    // .matches(\n    //   /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n    //   'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    // ),\n  })\n  .required();\n\nexport const ContactForm = () => {\n  const [isClicked, setIsClicked] = useState(false);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsLoading);\n\n  const toast = useToast();\n  useEffect(() => {\n    if (!isLoading) {\n      setIsClicked(false);\n    }\n  }, [isLoading]);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = ({ name, number }) => {\n    setIsClicked(true);\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return toast({\n        title: `${name} is already in contacts`,\n        variant: 'subtle',\n        isClosable: true,\n        position: 'top-right',\n        status: 'warning',\n        duration: 3000,\n      });\n    }\n\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const bg = useColorModeValue('teal.50', '#0a192f');\n\n  return (\n    <VStack\n      onSubmit={handleSubmit(onSubmit)}\n      as=\"form\"\n      mx=\"auto\"\n      justifyContent=\"center\"\n      mb={6}\n      p=\"4\"\n      maxH=\"fit\"\n    >\n      <Heading>Create new contact</Heading>\n\n      <FormControl isInvalid={errors.name} isRequired>\n        <FormLabel fontWeight=\"600\">Name</FormLabel>\n        <Input type=\"text\" {...register('name')} bg={bg} />\n        <FormErrorMessage>\n          {errors.name && errors.name.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.number} isRequired>\n        <FormLabel fontWeight=\"600\">Phone</FormLabel>\n        <Input type=\"tel\" {...register('number')} bg={bg} />\n        <FormErrorMessage>\n          {errors.number && errors.number.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <Button\n        type=\"submit\"\n        variant=\"outline\"\n        colorScheme=\"teal\"\n        isLoading={isLoading && isClicked}\n      >\n        Add contact\n      </Button>\n    </VStack>\n  );\n};\n","import {\n  Button,\n  ButtonGroup,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  useColorModeValue,\n  useToast,\n} from '@chakra-ui/react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { schema } from 'components/ContactForm/ContactForm';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\n\nexport const EditForm = ({ onCancel, contact }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting, isValid },\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(schema),\n  });\n  const toast = useToast();\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    const { name, number } = data;\n    dispatch(updateContact({ id: contact.id, body: { name, number } }))\n      .unwrap()\n      .then(() => {\n        toast({\n          title: `Contact updated`,\n          variant: 'subtle',\n          isClosable: true,\n          position: 'top-right',\n          status: 'success',\n          duration: 3000,\n        });\n        onCancel();\n      })\n      .catch(() =>\n        toast({\n          title: `Something went wrong. Please try again later`,\n          variant: 'subtle',\n          isClosable: true,\n          position: 'top-right',\n          status: 'error',\n          duration: 3000,\n        })\n      );\n  };\n\n  const bg = useColorModeValue('teal.50', '#0a192f');\n  return (\n    <VStack as=\"form\" spacing={4} onSubmit={handleSubmit(onSubmit)} p={6}>\n      <FormControl isInvalid={errors.name} isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          type=\"text\"\n          {...register('name')}\n          defaultValue={contact?.name}\n          bg={bg}\n        />\n        {/*  */}\n        {/* <FormErrorMessage>\n          {errors.name && toast.error(`${errors.name.message}`)}\n        </FormErrorMessage> */}\n      </FormControl>\n\n      <FormControl isInvalid={errors.number} isRequired>\n        <FormLabel>Phone</FormLabel>\n        <Input\n          type=\"tel\"\n          {...register('number')}\n          defaultValue={contact?.number}\n          bg={bg}\n        />\n        {/* <FormErrorMessage>\n          <Box>{errors.number && errors.number.message}</Box>\n        </FormErrorMessage> */}\n      </FormControl>\n\n      <ButtonGroup display=\"flex\" justifyContent=\"flex-end\">\n        <Button onClick={onCancel} variant=\"outline\" colorScheme=\"teal\">\n          Cancel\n        </Button>\n        <Button\n          isLoading={isSubmitting}\n          type=\"submit\"\n          isDisabled={!isValid}\n          colorScheme=\"teal\"\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n    </VStack>\n  );\n};\n","import { EditForm } from 'components/EditForm/EditForm';\n\nconst { EditIcon } = require('@chakra-ui/icons');\nconst {\n  useDisclosure,\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  FocusLock,\n  PopoverArrow,\n  PopoverCloseButton,\n} = require('@chakra-ui/react');\n\nconst { useRef } = require('react');\n\nexport const PopoverForm = ({ contact }) => {\n  const { onOpen, onClose, isOpen } = useDisclosure();\n  const firstFieldRef = useRef(null);\n\n  return (\n    <>\n      <Popover\n        isOpen={isOpen}\n        initialFocusRef={firstFieldRef}\n        onOpen={onOpen}\n        onClose={onClose}\n        closeOnBlur={true}\n      >\n        <PopoverTrigger>\n          <IconButton\n            w={8}\n            h={8}\n            icon={<EditIcon />}\n            variant=\"outline\"\n            colorScheme=\"teal\"\n            _hover={{ bg: 'teal.100' }}\n            _focus={{ bg: 'teal.100' }}\n          />\n        </PopoverTrigger>\n        <PopoverContent>\n          <FocusLock returnFocus persistentFocus={false}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <EditForm onCancel={onClose} contact={contact} />\n          </FocusLock>\n        </PopoverContent>\n      </Popover>\n    </>\n  );\n};\n","export const formatContact = contact => {\n  let newContact;\n  if (contact.replace(/\\D+/g, '').length === 12) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{3})(\\d{2})(\\d{3})(\\d{4}).*/, '+$1-$2-$3-$4');\n  } else if (contact.replace(/\\D+/g, '').length === 11) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{2})(\\d{2})(\\d{3})(\\d{4}).*/, '+$1-$2-$3-$4');\n  } else if (contact.replace(/\\D+/g, '').length === 10) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{3})(\\d{3})(\\d{4}).*/, '$1-$2-$3');\n  } else if (contact.replace(/\\D+/g, '').length === 9) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{2})(\\d{3})(\\d{4}).*/, '$1-$2-$3');\n  } else if (contact.replace(/\\D+/g, '').length === 7) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{3})(\\d{4}).*/, '$1-$2');\n  } else newContact = contact;\n\n  return newContact;\n};\n","import { DeleteIcon } from '@chakra-ui/icons';\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogCloseButton,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Button,\n  CircularProgress,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { PropTypes } from 'prop-types';\nimport { useRef } from 'react';\n\nexport const WarningAlert = ({ onClick, isDeleting }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef();\n\n  return (\n    <>\n      <Button\n        type=\"button\"\n        onClick={onOpen}\n        disabled={isDeleting}\n        colorScheme=\"teal\"\n        variant=\"outline\"\n        w={8}\n        h={8}\n        _hover={{ bg: 'teal.100' }}\n        _focus={{ bg: 'teal.100' }}\n      >\n        {isDeleting ? (\n          <CircularProgress isIndeterminate color=\"teal.800\" size=\"16px\" />\n        ) : (\n          <DeleteIcon color={'teal.700'} />\n        )}\n      </Button>\n      <AlertDialog\n        motionPreset=\"slideInBottom\"\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n        isOpen={isOpen}\n        isCentered\n      >\n        <AlertDialogOverlay />\n\n        <AlertDialogContent>\n          <AlertDialogHeader>Discard Changes?</AlertDialogHeader>\n          <AlertDialogCloseButton />\n          <AlertDialogBody>\n            Are you sure? You can't undo this action afterwards.\n          </AlertDialogBody>\n          <AlertDialogFooter>\n            <Button ref={cancelRef} onClick={onClose} colorScheme=\"teal\">\n              No\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              isLoading={isDeleting}\n              ml={3}\n              onClick={onClick}\n            >\n              Yes\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nWarningAlert.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  isDeleting: PropTypes.bool,\n};\n","import { Box, ListItem } from '@chakra-ui/react';\nimport { PopoverForm } from 'components/Popover/Popover';\nimport { PropTypes } from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { formatContact } from 'utils';\nimport { WarningAlert } from '../AlertDialog/AlertDialog';\n\nexport const ContactItem = ({ contact }) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n    setIsDeleting(true);\n  };\n\n  return (\n    <ListItem\n      key={contact.id}\n      paddingLeft={{ base: '12px', md: '35px', lg: '40px' }}\n      paddingRight={{ base: '12px', md: '20px' }}\n      paddingTop={1}\n      paddingBottom={1}\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Box flexBasis=\"40%\">{contact.name}: </Box>\n      <Box flexBasis=\"40%\">{formatContact(contact.number)}</Box>\n      <Box\n        flexBasis=\"20%\"\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n        alignItems=\"center\"\n        gap={{ base: '5px', md: '10px' }}\n      >\n        <PopoverForm contact={contact} />\n        <WarningAlert onClick={handleDelete} isDeleting={isDeleting} />\n      </Box>\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectContactsLoading,\n  selectFilter,\n} from 'redux/selectors';\nimport {\n  Box,\n  Center,\n  CircularProgress,\n  Heading,\n  List,\n  ListItem,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectContactsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    let normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact?.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const stickyHeaders = getVisibleContacts()\n    .map(contact => contact.name[0].toUpperCase())\n    .filter((el, index, array) => array.indexOf(el) === index);\n\n  const createContactGroup = el => {\n    const contactGroup = getVisibleContacts().filter(\n      contact => contact.name[0].toUpperCase() === el\n    );\n    return contactGroup;\n  };\n\n  const bg = useColorModeValue('teal.100', '#172a46');\n\n  return (\n    <div>\n      {/* {error && <p>Something went wrong, please try again later</p>} */}\n      {contacts.length === 0 && isLoading && (\n        <Center>\n          <CircularProgress isIndeterminate color=\"teal.800\" />\n        </Center>\n      )}\n\n      {contacts.length === 0 && !isLoading && (\n        <Text textAlign=\"center\" fontSize=\"2xl\">\n          There are no contacts yet. Please add a new contact\n        </Text>\n      )}\n      {getVisibleContacts().length === 0 && contacts.length !== 0 && (\n        <Text>There is no such contact</Text>\n      )}\n\n      {contacts.length !== 0 && getVisibleContacts().length > 0 && (\n        <Box position=\"relative\">\n          <List position=\"relative\">\n            {stickyHeaders.map(el => (\n              <ListItem key={`section-${el}`}>\n                <List>\n                  <Heading\n                    position=\"sticky\"\n                    top=\"15px\"\n                    bg={bg}\n                    paddingLeft=\"5px\"\n                    opacity=\"0.8\"\n                    borderRadius=\"5px\"\n                  >\n                    {el}\n                  </Heading>\n                  <Box>\n                    {createContactGroup(el).map(contact => (\n                      <ContactItem key={contact.id} contact={contact} />\n                    ))}\n                  </Box>\n                </List>\n              </ListItem>\n            ))}\n          </List>\n        </Box>\n      )}\n    </div>\n  );\n};\n","import { Search2Icon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectContacts, selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const bg = useColorModeValue('#ffffff', '#172a46');\n  const boxShadow = useColorModeValue(\n    '#086F83 0px 0px 10px',\n    '#5ff0d0 0px 0px 10px'\n  );\n  return (\n    <>\n      {contacts.length !== 0 && (\n        <FormControl mb={6}>\n          <FormLabel fontSize=\"lg\" fontWeight=\"600\">\n            Find contacts by name\n          </FormLabel>\n          <Input\n            name=\"filter\"\n            type=\"text\"\n            value={filterValue}\n            onChange={event => dispatch(setFilter(event.target.value))}\n            pos=\"relative\"\n            bg={bg}\n            boxShadow={boxShadow}\n          />\n          <Search2Icon\n            pos=\"absolute\"\n            top=\"50%\"\n            transform=\"translateY(50%)\"\n            right=\"16px\"\n            zIndex={2}\n          />\n        </FormControl>\n      )}\n    </>\n  );\n};\n","import { Box } from '@chakra-ui/react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  return (\n    <>\n      <Box display={{ lg: 'flex' }} gap={8} alignItems=\"flex-start\">\n        <ContactForm />\n        <Box flexGrow={1}>\n          <Filter />\n          <ContactList />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["schema","yup","name","required","min","matches","number","transform","currentValue","replace","max","ContactForm","useState","isClicked","setIsClicked","dispatch","useDispatch","contacts","useSelector","selectContacts","isLoading","selectContactsLoading","toast","useToast","useEffect","useForm","mode","resolver","yupResolver","register","handleSubmit","reset","errors","formState","bg","useColorModeValue","onSubmit","find","contact","toLowerCase","title","variant","isClosable","position","status","duration","addContact","as","mx","justifyContent","mb","p","maxH","isInvalid","isRequired","fontWeight","I","type","message","colorScheme","EditForm","onCancel","isSubmitting","isValid","spacing","data","updateContact","id","body","unwrap","then","catch","defaultValue","display","onClick","isDisabled","EditIcon","require","useDisclosure","Popover","PopoverTrigger","IconButton","PopoverContent","FocusLock","PopoverArrow","PopoverCloseButton","useRef","PopoverForm","onOpen","onClose","isOpen","firstFieldRef","initialFocusRef","closeOnBlur","w","h","icon","_hover","_focus","returnFocus","persistentFocus","formatContact","length","WarningAlert","isDeleting","cancelRef","disabled","isIndeterminate","color","size","motionPreset","leastDestructiveRef","isCentered","ref","ml","ContactItem","setIsDeleting","paddingLeft","base","md","lg","paddingRight","paddingTop","paddingBottom","alignItems","flexBasis","gap","deleteContact","ContactList","filter","selectFilter","fetchContacts","getVisibleContacts","normalizedFilter","includes","stickyHeaders","map","toUpperCase","el","index","array","indexOf","createContactGroup","textAlign","fontSize","top","opacity","borderRadius","Filter","filterValue","boxShadow","value","onChange","event","setFilter","target","pos","right","zIndex","flexGrow"],"sourceRoot":""}