{"version":3,"file":"static/js/633.0d4dedde.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/EditForm/EditForm.jsx","components/Popover/Popover.jsx","utils/formatContact.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/selectors';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  VStack,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nexport const schema = yup\n  .object({\n    name: yup\n      .string()\n      .required('Name is required')\n      .min(3, 'Name must be no less than 3 characters long')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces'\n      ),\n    number: yup\n      .string()\n      .required('Number is required')\n      .transform(currentValue => currentValue.replace(/\\D+/g, ''))\n      .min(7, 'Number phone must be no less than 7 characters long')\n      .max(12, 'Number phone must be no more than 12 digits'),\n    // .matches(\n    //   /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n    //   'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    // ),\n  })\n  .required();\n\nexport const ContactForm = () => {\n  // const [isClicked, setIsClicked] = useState(false);\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  // const isLoading = useSelector(getLoading);\n\n  // useEffect(() => {\n  //   if (!isLoading) {\n  //     setIsClicked(false);\n  //   }\n  // }, [isLoading]);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = ({ name, number }) => {\n    // setIsClicked(true);\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return toast.warn(`${name} is already in contacts`);\n    }\n\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const bg = useColorModeValue('teal.50', '#0a192f');\n\n  return (\n    <VStack\n      onSubmit={handleSubmit(onSubmit)}\n      as=\"form\"\n      mx=\"auto\"\n      justifyContent=\"center\"\n      mb={6}\n      p=\"4\"\n      maxH=\"fit\"\n    >\n      <Heading>Create new contact</Heading>\n\n      <FormControl isInvalid={errors.name} isRequired>\n        <FormLabel fontWeight=\"600\">Name</FormLabel>\n        <Input type=\"text\" {...register('name')} bg={bg} />\n        <FormErrorMessage>\n          {errors.name && errors.name.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={errors.number} isRequired>\n        <FormLabel fontWeight=\"600\">Phone</FormLabel>\n        <Input type=\"tel\" {...register('number')} bg={bg} />\n        <FormErrorMessage>\n          {errors.number && errors.number.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <Button type=\"submit\" variant=\"outline\" colorScheme=\"teal\">\n        Add contact\n      </Button>\n    </VStack>\n\n    // <form onSubmit={handleSubmit(onSubmit)}>\n    //   <div>\n    //     <label>Name</label>\n    //     <input type=\"text\" {...register('name')} />\n    //     {formState.errors.name && <p>{formState.errors.name.message}</p>}\n    //   </div>\n\n    //   <div>\n    //     <label>Phone</label>\n    //     <input type=\"tel\" {...register('number')} />\n    //     {formState.errors.number && <p>{formState.errors.number.message}</p>}\n    //   </div>\n\n    //   <button\n    //     type=\"submit\"\n    //     disabled={(isLoading && isClicked) || !formState.isValid}\n    //   >\n    //     <span>Add contact</span>\n    //     {isLoading && isClicked && (\n    //       <RotatingLines strokeColor=\"grey\" width=\"20px\" />\n    //     )}\n    //   </button>\n    // </form>\n  );\n};\n","import {\n  Button,\n  ButtonGroup,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { schema } from 'components/ContactForm/ContactForm';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { updateContact } from 'redux/contacts/contactsOperations';\n\nexport const EditForm = ({ onCancel, contact }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting, isValid },\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(schema),\n  });\n\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    const { name, number } = data;\n    dispatch(updateContact({ id: contact.id, body: { name, number } }))\n      .unwrap()\n      .then(() => {\n        toast.success(`Contact updated`);\n        onCancel();\n      })\n      .catch(() => toast.error(`Something went wrong. Please try again later`));\n  };\n\n  const bg = useColorModeValue('teal.50', '#0a192f');\n  return (\n    <VStack as=\"form\" spacing={4} onSubmit={handleSubmit(onSubmit)} p={6}>\n      <FormControl isInvalid={errors.name} isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          type=\"text\"\n          {...register('name')}\n          defaultValue={contact?.name}\n          bg={bg}\n        />\n        {/*  */}\n        {/* <FormErrorMessage>\n          {errors.name && toast.error(`${errors.name.message}`)}\n        </FormErrorMessage> */}\n      </FormControl>\n\n      <FormControl isInvalid={errors.number} isRequired>\n        <FormLabel>Phone</FormLabel>\n        <Input\n          type=\"tel\"\n          {...register('number')}\n          defaultValue={contact?.number}\n          bg={bg}\n        />\n        {/* <FormErrorMessage>\n          <Box>{errors.number && errors.number.message}</Box>\n        </FormErrorMessage> */}\n      </FormControl>\n\n      <ButtonGroup display=\"flex\" justifyContent=\"flex-end\">\n        <Button onClick={onCancel} variant=\"outline\" colorScheme=\"teal\">\n          Cancel\n        </Button>\n        <Button\n          isLoading={isSubmitting}\n          type=\"submit\"\n          isDisabled={!isValid}\n          colorScheme=\"teal\"\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n    </VStack>\n  );\n};\n","import { EditForm } from 'components/EditForm/EditForm';\n\nconst { EditIcon } = require('@chakra-ui/icons');\nconst {\n  useDisclosure,\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  FocusLock,\n  PopoverArrow,\n  PopoverCloseButton,\n} = require('@chakra-ui/react');\n\nconst { useRef } = require('react');\n\nexport const PopoverForm = ({ contact }) => {\n  const { onOpen, onClose, isOpen } = useDisclosure();\n  const firstFieldRef = useRef(null);\n\n  return (\n    <>\n      <Popover\n        isOpen={isOpen}\n        initialFocusRef={firstFieldRef}\n        onOpen={onOpen}\n        onClose={onClose}\n        closeOnBlur={true}\n      >\n        <PopoverTrigger>\n          <IconButton\n            w={8}\n            h={8}\n            icon={<EditIcon />}\n            variant=\"outline\"\n            colorScheme=\"teal\"\n            _hover={{ bg: 'teal.100' }}\n            _focus={{ bg: 'teal.100' }}\n          />\n        </PopoverTrigger>\n        <PopoverContent>\n          <FocusLock returnFocus persistentFocus={false}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <EditForm onCancel={onClose} contact={contact} />\n          </FocusLock>\n        </PopoverContent>\n      </Popover>\n    </>\n  );\n};\n","export const formatContact = contact => {\n  let newContact;\n  if (contact.replace(/\\D+/g, '').length === 12) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{3})(\\d{2})(\\d{3})(\\d{4}).*/, '+$1-$2-$3-$4');\n  } else if (contact.replace(/\\D+/g, '').length === 11) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{2})(\\d{2})(\\d{3})(\\d{4}).*/, '+$1-$2-$3-$4');\n  } else if (contact.replace(/\\D+/g, '').length === 10) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{3})(\\d{3})(\\d{4}).*/, '$1-$2-$3');\n  } else if (contact.replace(/\\D+/g, '').length === 9) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{2})(\\d{3})(\\d{4}).*/, '$1-$2-$3');\n  } else if (contact.replace(/\\D+/g, '').length === 7) {\n    newContact = contact\n      .replace(/\\D+/g, '')\n      .replace(/^(\\d{3})(\\d{4}).*/, '$1-$2');\n  } else newContact = contact;\n\n  return newContact;\n};\n","import { DeleteIcon } from '@chakra-ui/icons';\nimport { Box, Button, ListItem } from '@chakra-ui/react';\nimport { PopoverForm } from 'components/Popover/Popover';\nimport { PropTypes } from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { formatContact } from 'utils';\n\nexport const ContactItem = ({ contact }) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem\n      key={contact.id}\n      paddingLeft={{ base: '12px', md: '35px', lg: '40px' }}\n      paddingRight={{ base: '12px', md: '20px' }}\n      paddingTop={1}\n      paddingBottom={1}\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Box flexBasis=\"40%\">{contact.name}: </Box>\n      <Box flexBasis=\"40%\">{formatContact(contact.number)}</Box>\n      <Box\n        flexBasis=\"20%\"\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n        alignItems=\"center\"\n        gap={{ base: '5px', md: '10px' }}\n      >\n        <PopoverForm contact={contact} />\n        <Button\n          type=\"button\"\n          onClick={() => {\n            dispatch(deleteContact(contact.id));\n            setIsDeleting(true);\n          }}\n          disabled={isDeleting}\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          w={8}\n          h={8}\n          _hover={{ bg: 'teal.100' }}\n          _focus={{ bg: 'teal.100' }}\n        >\n          {isDeleting ? (\n            <span>deleting...</span>\n          ) : (\n            <DeleteIcon color={'teal.700'} />\n          )}\n        </Button>\n      </Box>\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { getContacts, getFilter, getLoading } from 'redux/selectors';\nimport {\n  Box,\n  Center,\n  CircularProgress,\n  Heading,\n  List,\n  ListItem,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const isLoading = useSelector(getLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    let normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact?.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const stickyHeaders = getVisibleContacts()\n    .map(contact => contact.name[0].toUpperCase())\n    .filter((el, index, array) => array.indexOf(el) === index);\n\n  const createContactGroup = el => {\n    const contactGroup = getVisibleContacts().filter(\n      contact => contact.name[0].toUpperCase() === el\n    );\n    return contactGroup;\n  };\n\n  const bg = useColorModeValue('teal.100', '#172a46');\n\n  return (\n    <div>\n      {/* {error && <p>Something went wrong, please try again later</p>} */}\n      {contacts.length === 0 && isLoading && (\n        <Center>\n          <CircularProgress isIndeterminate color=\"teal.800\" />\n        </Center>\n      )}\n\n      {contacts.length === 0 && !isLoading && (\n        <Text textAlign=\"center\" fontSize=\"2xl\">\n          There are no contacts yet. Please add a new contact\n        </Text>\n      )}\n      {getVisibleContacts().length === 0 && contacts.length !== 0 && (\n        <Text>There is no such contact</Text>\n      )}\n\n      {contacts.length !== 0 && getVisibleContacts().length > 0 && (\n        <Box position=\"relative\">\n          <List position=\"relative\">\n            {stickyHeaders.map(el => (\n              <ListItem key={`section-${el}`}>\n                <List>\n                  <Heading\n                    position=\"sticky\"\n                    top=\"15px\"\n                    bg={bg}\n                    paddingLeft=\"5px\"\n                    opacity=\"0.8\"\n                    borderRadius=\"5px\"\n                  >\n                    {el}\n                  </Heading>\n                  <Box>\n                    {createContactGroup(el).map(contact => (\n                      <ContactItem key={contact.id} contact={contact} />\n                    ))}\n                  </Box>\n                </List>\n              </ListItem>\n            ))}\n          </List>\n        </Box>\n      )}\n    </div>\n  );\n};\n","import { Search2Icon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { getContacts, getFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filterValue = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const bg = useColorModeValue('#ffffff', '#172a46');\n  const boxShadow = useColorModeValue(\n    '#086F83 0px 0px 10px',\n    '#5ff0d0 0px 0px 10px'\n  );\n  return (\n    <>\n      {contacts.length !== 0 && (\n        <FormControl mb={6}>\n          <FormLabel fontSize=\"lg\" fontWeight=\"600\">\n            Find contacts by name\n          </FormLabel>\n          <Input\n            name=\"filter\"\n            type=\"text\"\n            value={filterValue}\n            onChange={event => dispatch(setFilter(event.target.value))}\n            pos=\"relative\"\n            bg={bg}\n            boxShadow={boxShadow}\n          />\n          <Search2Icon\n            pos=\"absolute\"\n            top=\"50%\"\n            transform=\"translateY(50%)\"\n            right=\"16px\"\n            zIndex={2}\n          />\n        </FormControl>\n      )}\n    </>\n  );\n};\n","import { Box } from '@chakra-ui/react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  return (\n    <>\n      <Box display={{ lg: 'flex' }} gap={8} alignItems=\"flex-start\">\n        <ContactForm />\n        <Box flexGrow={1}>\n          {/* <Heading fontSize=\"3em\" mb={6}>\n            Contacts\n          </Heading> */}\n          <Filter />\n          <ContactList />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["schema","yup","name","required","min","matches","number","transform","currentValue","replace","max","ContactForm","dispatch","useDispatch","contacts","useSelector","getContacts","useForm","mode","resolver","yupResolver","register","handleSubmit","reset","errors","formState","bg","useColorModeValue","onSubmit","find","contact","toLowerCase","toast","addContact","as","mx","justifyContent","mb","p","maxH","isInvalid","isRequired","fontWeight","I","type","message","variant","colorScheme","EditForm","onCancel","isSubmitting","isValid","spacing","data","updateContact","id","body","unwrap","then","catch","defaultValue","display","onClick","isLoading","isDisabled","EditIcon","require","useDisclosure","Popover","PopoverTrigger","IconButton","PopoverContent","FocusLock","PopoverArrow","PopoverCloseButton","useRef","PopoverForm","onOpen","onClose","isOpen","firstFieldRef","initialFocusRef","closeOnBlur","w","h","icon","_hover","_focus","returnFocus","persistentFocus","formatContact","length","ContactItem","useState","isDeleting","setIsDeleting","paddingLeft","base","md","lg","paddingRight","paddingTop","paddingBottom","alignItems","flexBasis","gap","deleteContact","disabled","color","ContactList","filter","getFilter","getLoading","useEffect","fetchContacts","getVisibleContacts","normalizedFilter","includes","stickyHeaders","map","toUpperCase","el","index","array","indexOf","createContactGroup","isIndeterminate","textAlign","fontSize","position","top","opacity","borderRadius","Filter","filterValue","boxShadow","value","onChange","event","setFilter","target","pos","right","zIndex","flexGrow"],"sourceRoot":""}